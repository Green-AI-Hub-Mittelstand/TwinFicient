{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 6,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P5697886F9CA74929"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "h",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Time"
            },
            "properties": [
              {
                "id": "unit",
                "value": "time:DD/MM/YY"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "\\{CelNr=\"([^\"]+)\", Company=\"([^\"]+)\", HgNr=\"([^\"]+)\", HzNr=\"([^\"]+)\"\\}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "${__field.labels.Company} / ${__field.labels.CelNr} / ${__field.labels.HzNr} / ${__field.labels.HgNr}"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 10,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        },
        "xField": "Time",
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 100
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P5697886F9CA74929"
          },
          "query": "import \"timezone\"\n\noption location = timezone.location(name: \"Europe/Berlin\")\n\nfrom(bucket: \"twinficient-aggregates\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"aggregations\")\n  |> filter(fn: (r) => (r[\"Company\"] == \"${Company_1}\" and r[\"CelNr\"] == \"${CelNr_1}\" and r[\"HzNr\"] == \"${HzNr_1}\" and r[\"HgNr\"] == \"${HgNr_1}\") or (r[\"Company\"] == \"${Company_2}\" and r[\"CelNr\"] == \"${CelNr_2}\" and r[\"HzNr\"] == \"${HzNr_2}\" and r[\"HgNr\"] == \"${HgNr_2}\"))\n  |> filter(fn: (r) => r._field == \"RtPerDay\")\n  |> group(columns: [\"Company\", \"CelNr\", \"HzNr\", \"HgNr\"])\n  |> aggregateWindow(every: ${AggregationTime}, fn: sum, timeSrc: \"_start\")",
          "refId": "A"
        }
      ],
      "title": "Heater Runtime",
      "transformations": [],
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P5697886F9CA74929"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "kWh",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Time"
            },
            "properties": [
              {
                "id": "unit",
                "value": "time:DD/MM/YY"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "\\{CelNr=\"([^\"]+)\", Company=\"([^\"]+)\", HgNr=\"([^\"]+)\", HzNr=\"([^\"]+)\"\\}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "${__field.labels.Company} / ${__field.labels.CelNr} / ${__field.labels.HzNr} / ${__field.labels.HgNr}"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 4,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        },
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 100
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P5697886F9CA74929"
          },
          "query": "import \"http/requests\"\nimport ejson \"experimental/json\"\nimport \"internal/debug\"\nimport \"contrib/qxip/hash\"\nimport \"strings\"\nimport \"array\"\nimport \"join\"\nimport \"experimental/record\"\n\naasRegistryUrl = \"http://aas-registry-v3:8080\"\nsmRegistryUrl = \"http://sm-registry-v3:8080\"\nendpointMapping = {\n    \"http://aas-environment.twinficient.localhost\" : \"http://aas-environment:8081\"\n}\n\noption requests.defaultConfig = {\n    timeout: 0s,\n    insecureSkipVerify: false,\n}\n\nbase64UrlEncode = (url) => {\n  e = hash.b64(v: url)\n  return strings.trimRight(v: e, cutset: \"=\")\n}\n\ncreateHeaterShellDescriptorUrl = (id) => {\n    return aasRegistryUrl + \"/shell-descriptors/\" + base64UrlEncode(url: id)\n}\n\ncreateHeaterShellDescriptorId = (company, celNr, hzNr, hgNr) => {\n    return \"http://aas.twinficient.de/heater/\" + company + \"/\" + celNr + \"/\" + hzNr + \"/\" + hgNr\n}\n\nextractEndpointPrefix = (epArr) => {\n    return if length(arr: epArr) >= 3\n    then epArr[0] + \"//\" + epArr[2]\n    else debug.null(type: \"string\")\n}\n\nresolveServerPart = (url) => {\n    return if exists url\n    then extractEndpointPrefix(epArr: strings.split(v: url, t: \"/\"))\n    else debug.null(type: \"string\")\n}\n\nresolveMapping = (url) => {\n    return if exists url\n    then record.get(r: endpointMapping, key: url, default: debug.null(type: \"string\"))  \n    else debug.null(type: \"string\")\n}\n\nresolveFirstEndpoint = (sd) => {\n    href = if exists sd[\"endpoints\"] and length(arr: sd.endpoints) > 0 and exists sd.endpoints[0][\"protocolInformation\"] and exists sd.endpoints[0].protocolInformation[\"href\"] then sd.endpoints[0].protocolInformation.href else debug.null(type: \"string\")\n    serverPart = resolveServerPart(url: href)\n    mappedPrefix = resolveMapping(url: serverPart)\n\n    return if exists mappedPrefix\n    then strings.replaceAll(v: href, t: serverPart, u: mappedPrefix)\n    else if exists href then href\n    else debug.null(type: \"string\")\n}\n\nlookupFirstEndpointInShellDescriptor = (id) => {\n    href = createHeaterShellDescriptorUrl(id: id)\n    response = requests.get(url: href,  headers: [\"Content-Type\": \"application/json\", \"accept\": \"application/json\"])\n    return if response.statusCode == 200\n    then resolveFirstEndpoint(sd: ejson.parse(data: response.body))\n    else debug.null(type: \"string\")\n}\n\n\nfindTechnicalSubmodlUrlInHeaterDefinitionShell = (shell) => {\n// we just have one -> so no need for filtering right now\n    return if exists shell and exists shell[\"submodels\"] and length(arr: shell.submodels) > 0 and exists shell.submodels[0][\"keys\"] and length(arr: shell.submodels[0].keys) > 0 and exists shell.submodels[0].keys[0]\n    then string(v: shell.submodels[0].keys[0].value)\n    else debug.null(type: \"string\")\n}\n\nlookupTechnicalSubmodelUrlFromSmRegistry = (id) => {\n    href = smRegistryUrl + \"/submodel-descriptors/\" + base64UrlEncode(url: id)\n    response = requests.get(url: href,  headers: [\"Content-Type\": \"application/json\", \"accept\": \"application/json\"])\n    return if response.statusCode == 200 \n    then resolveFirstEndpoint(sd: ejson.parse(data:response.body))//\"--\" + getPerfomanceFromDynamic(v: dynamic.jsonParse(data: response.body))\n    else debug.null(type: \"string\")\n}\n\nlookupTechnicalSubmodelIdFromShell = (shellUrl) => {\n    response = requests.get(url: shellUrl,  headers: [\"Content-Type\": \"application/json\", \"accept\": \"application/json\"])\n    return if response.statusCode == 200\n    then findTechnicalSubmodlUrlInHeaterDefinitionShell(shell: ejson.parse(data: response.body)) //findDerivedFrom(shell: ejson.parse(data: response.body))\n    else debug.null(type: \"string\")\n}\n\nfindDevicePerformanceInSubmodel = (sm) => {\n    return if exists sm and exists sm[\"submodelElements\"] and length(arr: sm.submodelElements) > 0 \n              and exists sm.submodelElements[0][\"value\"] and length(arr: sm.submodelElements[0].value) > 0\n              and exists sm.submodelElements[0].value[0][\"value\"] and length(arr: sm.submodelElements[0].value[0].value) > 0\n              and exists sm.submodelElements[0].value[0].value[0][\"value\"] and length(arr: sm.submodelElements[0].value[0].value) > 0\n              and exists sm.submodelElements[0].value[0].value[0].value[0][\"value\"]\n    then string(v: sm.submodelElements[0].value[0].value[0].value[0].value)\n    else debug.null(type: \"string\")\n}\n\ngetDevicePerformanceBySubmodelUrl = (smUrl) => {\n    response = requests.get(url: smUrl,  headers: [\"Content-Type\": \"application/json\", \"accept\": \"application/json\"])\n    return if response.statusCode == 200\n    then findDevicePerformanceInSubmodel(sm: ejson.parse(data: response.body))\n    else debug.null(type: \"string\")\n}\n\ngetDevicePerfomanceByDerivedFrom = (df) => {\n    url = lookupFirstEndpointInShellDescriptor(id: df)\n    submodelId = if exists url \n    then lookupTechnicalSubmodelIdFromShell(shellUrl: url)\n    else debug.null(type: \"string\")\n\n    submodelUrl = if exists submodelId\n    then lookupTechnicalSubmodelUrlFromSmRegistry(id: submodelId)\n    else debug.null(type: \"string\")\n\n    return if exists submodelUrl\n    then getDevicePerformanceBySubmodelUrl(smUrl: submodelUrl)\n    else debug.null(type: \"string\")\n}\n\nwithDevicePerformance = (t=<-) => {\n\n    performance = t\n         |> keep(columns: [\"derivedFrom\"])\n         |> unique(column: \"derivedFrom\")\n         |> map(fn: (r) => ({r with performance: if exists r.derivedFrom then getDevicePerfomanceByDerivedFrom(df: r.derivedFrom) else \"-1.0\"}))\n\n    result = join.left(\n        left: t |> group(columns: []),\n        right: performance,\n        on: (l, r) => l.derivedFrom == r.derivedFrom,\n        as: (l, r) => ({ l with performance: r.performance}),\n     ) \n\n    return result\n}\n\nfindDerivedFrom = (shell) => {\n     return if exists shell and exists shell[\"derivedFrom\"] and exists shell.derivedFrom[\"keys\"] and length(arr: shell.derivedFrom.keys) > 0 and exists  shell.derivedFrom.keys[0][\"value\"]\n     then string(v: shell.derivedFrom.keys[0].value)\n     else debug.null(type: \"string\")\n}\n\nlookupShellsDerivedFrom = (url) => {\n    response = requests.get(url: url,  headers: [\"Content-Type\": \"application/json\", \"accept\": \"application/json\"])\n    return if response.statusCode == 200\n    then findDerivedFrom(shell: ejson.parse(data: response.body))\n    else debug.null(type: \"string\")\n}\n\ngetDerivedFrom = (company, celNr, hzNr, hgNr) => {\n    shellId = createHeaterShellDescriptorId(company: company, celNr: celNr, hzNr: hzNr, hgNr: hgNr)\n    endpoint = lookupFirstEndpointInShellDescriptor(id: shellId)\n    return if exists endpoint \n    then  lookupShellsDerivedFrom(url: endpoint)\n    else debug.null(type: \"string\")\n}\n\nwithDerivedFrom = (t=<-) => t |> map(fn: (r) => ({r with derivedFrom: getDerivedFrom(company: r.Company, celNr: r.CelNr, hzNr: r.HzNr, hgNr: r.HgNr)})) \n\naddPerformance = (t=<-) => {\n    toCalculateOn = \n        t |> filter(fn: (r) => exists r.Company and exists r.CelNr and exists r.HzNr and exists r.HgNr)    \n          |> last()\n          |> withDerivedFrom()\n          |> withDevicePerformance()\n\n    result = join.left(\n        left: t |> group(columns: []),\n        right: toCalculateOn,\n        on: (l, r) => l.Company == r.Company and l.CelNr == r.CelNr and l.HzNr == r.HzNr and l.HgNr == r.HgNr,\n        as: (l, r) => ({ l with performance: float(v: r.performance)}),\n     ) \n\n    return  result |> group(columns: [\"_measurement\", \"_field\", \"Company\", \"CelNr\", \"HzNr\", \"HgNr\"]) |> sort(columns: [\"_time\"])\n}\n\n\nfrom(bucket: \"twinficient-aggregates\") \n    |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n    |> filter(fn: (r) => r[\"_measurement\"] == \"aggregations\"  )\n    |> filter(fn: (r) => r._field == \"RtPerDay\" )\n    |> filter(fn: (r) => exists r.HzNr and exists r.HgNr and exists r.CelNr and exists r.Company)\n    |> filter(fn: (r) => (r[\"Company\"] == \"${Company_1}\" and r[\"CelNr\"] == \"${CelNr_1}\" and r[\"HzNr\"] == \"${HzNr_1}\" and r[\"HgNr\"] == \"${HgNr_1}\") or (r[\"Company\"] == \"${Company_2}\" and r[\"CelNr\"] == \"${CelNr_2}\" and r[\"HzNr\"] == \"${HzNr_2}\" and r[\"HgNr\"] == \"${HgNr_2}\"))\n    |> addPerformance()   \n     \n    |> map(fn: (r) => ({ r with runtime : r._value})) \n    |> map(fn: (r) => ({ r with _value : if exists r.performance then r._value * float(v: r.performance) else 0.0 - 100.0 * r.performance }))   \n\n    |> set(key: \"_field\", value: \"consumption\")\n    |> group(columns: [\"Company\", \"CelNr\", \"HzNr\", \"HgNr\"])\n    |> aggregateWindow(every: ${AggregationTime}, fn: sum, timeSrc: \"_start\")\n    |> drop(columns: [\"_start\", \"_stop\"]) \n    |> yield()\n\n",
          "refId": "A"
        }
      ],
      "title": "Consumption Rate",
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P5697886F9CA74929"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Number of Errors",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 1,
            "scaleDistribution": {
              "type": "linear"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Time"
            },
            "properties": [
              {
                "id": "unit",
                "value": "time:DD/MM/YY"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "\\{CelNr=\"([^\"]+)\", Company=\"([^\"]+)\", HgNr=\"([^\"]+)\", HzNr=\"([^\"]+)\"\\}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "${__field.labels.Company} / ${__field.labels.CelNr} / ${__field.labels.HzNr} / ${__field.labels.HgNr}"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 2,
      "options": {
        "barRadius": 0,
        "barWidth": 0.97,
        "fullHighlight": false,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "orientation": "auto",
        "showValue": "auto",
        "stacking": "none",
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        },
        "xTickLabelRotation": 0,
        "xTickLabelSpacing": 100
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P5697886F9CA74929"
          },
          "query": "import \"timezone\"\n\noption location = timezone.location(name: \"Europe/Berlin\")\n\nfrom(bucket: \"twinficient-aggregates\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"aggregations\")\n  |> filter(fn: (r) => (r[\"Company\"] == \"${Company_1}\" and r[\"CelNr\"] == \"${CelNr_1}\" and r[\"HzNr\"] == \"${HzNr_1}\" and r[\"HgNr\"] == \"${HgNr_1}\") or (r[\"Company\"] == \"${Company_2}\" and r[\"CelNr\"] == \"${CelNr_2}\" and r[\"HzNr\"] == \"${HzNr_2}\" and r[\"HgNr\"] == \"${HgNr_2}\"))\n  |> filter(fn: (r) => r._field == \"ErrorCodesPerDay\")\n  |> group(columns: [\"Company\", \"CelNr\", \"HzNr\", \"HgNr\"])\n  |> aggregateWindow(every: ${AggregationTime}, fn: sum, timeSrc: \"_start\")",
          "refId": "A"
        }
      ],
      "title": "Error Codes",
      "type": "barchart"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P5697886F9CA74929"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "μm",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byRegexp",
              "options": "HgIonCurr \\{CelNr=\"([^\"]+)\", Company=\"([^\"]+)\", HgNr=\"([^\"]+)\", HzNr=\"([^\"]+)\"\\}"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "${__field.labels.Company} / ${__field.labels.CelNr} / ${__field.labels.HzNr} / ${__field.labels.HgNr}"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "_time"
            },
            "properties": [
              {
                "id": "unit",
                "value": "time:DD/MM/YY"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 12,
        "y": 8
      },
      "id": 14,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.3.16",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "P5697886F9CA74929"
          },
          "query": "from(bucket: \"twinficient\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"celestra\")\n  |> filter(fn: (r) => (r[\"Company\"] == \"${Company_1}\" and r[\"CelNr\"] == \"${CelNr_1}\" and r[\"HzNr\"] == \"${HzNr_1}\" and r[\"HgNr\"] == \"${HgNr_1}\") or (r[\"Company\"] == \"${Company_2}\" and r[\"CelNr\"] == \"${CelNr_2}\" and r[\"HzNr\"] == \"${HzNr_2}\" and r[\"HgNr\"] == \"${HgNr_2}\"))\n  |> filter(fn: (r) => r[\"_field\"] == \"HgIonCurr\" or r[\"_field\"] == \"HgStat\")\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> group(columns: [\"Company\",\"CelNr\",\"HzNr\",\"HgNr\"])\n  |> duplicate(column: \"HgIonCurr\", as: \"DifHgIonCurr\")\n  |> duplicate(column: \"HgStat\", as: \"DifHgStat\")\n  |> difference(columns: [\"DifHgIonCurr\",\"DifHgStat\"], keepFirst: true)\n  |> filter(fn: (r) => (r.DifHgIonCurr != 0 or (r.DifHgStat != 0 and r.HgStat == 0)) and r.HgIonCurr > 0)\n  |> map(fn: (r) => ({r with HgIonCurr: float(v: r.HgIonCurr)/10.0}))\n  |> keep(columns: [\"Company\",\"CelNr\",\"HzNr\",\"HgNr\",\"_time\", \"HgIonCurr\"])",
          "refId": "A"
        }
      ],
      "title": "Ionisation Stream",
      "type": "timeseries"
    }
  ],
  "refresh": false,
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "1mo",
          "value": "1mo"
        },
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "AggregationTime",
        "options": [
          {
            "selected": true,
            "text": "1mo",
            "value": "1mo"
          },
          {
            "selected": false,
            "text": "1w",
            "value": "1w"
          },
          {
            "selected": false,
            "text": "1d",
            "value": "1d"
          }
        ],
        "query": "1mo,1w,1d",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "datasource": {
          "type": "influxdb",
          "uid": "P5697886F9CA74929"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"Company\",\n    predicate: (r) => r._measurement == \"celestra\",\n    start: 0\n)",
        "hide": 0,
        "includeAll": false,
        "label": "Company 1",
        "multi": false,
        "name": "Company_1",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"Company\",\n    predicate: (r) => r._measurement == \"celestra\",\n    start: 0\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "datasource": {
          "type": "influxdb",
          "uid": "P5697886F9CA74929"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"CelNr\",\n    predicate: (r) => r._measurement == \"celestra\" and r.Company == \"${Company_1}\",\n    start: 0\n)",
        "hide": 0,
        "includeAll": false,
        "label": "CelNr 1",
        "multi": false,
        "name": "CelNr_1",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"CelNr\",\n    predicate: (r) => r._measurement == \"celestra\" and r.Company == \"${Company_1}\",\n    start: 0\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "datasource": {
          "type": "influxdb",
          "uid": "P5697886F9CA74929"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"HzNr\",\n    predicate: (r) => r._measurement == \"celestra\" and r.CelNr == \"${CelNr_1}\" and r.Company == \"${Company_1}\" and r.HgNr == \"${HgNr_1}\",\n    start: 0\n)",
        "hide": 0,
        "includeAll": false,
        "label": "HzNr 1",
        "multi": false,
        "name": "HzNr_1",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"HzNr\",\n    predicate: (r) => r._measurement == \"celestra\" and r.CelNr == \"${CelNr_1}\" and r.Company == \"${Company_1}\" and r.HgNr == \"${HgNr_1}\",\n    start: 0\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "datasource": {
          "type": "influxdb",
          "uid": "P5697886F9CA74929"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"HgNr\",\n    predicate: (r) => r._measurement == \"celestra\" and r.CelNr == \"${CelNr_1}\" and r.Company == \"${Company_1}\", \n    start: 0\n)",
        "hide": 0,
        "includeAll": false,
        "label": "HgNr 1",
        "multi": false,
        "name": "HgNr_1",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"HgNr\",\n    predicate: (r) => r._measurement == \"celestra\" and r.CelNr == \"${CelNr_1}\" and r.Company == \"${Company_1}\", \n    start: 0\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "datasource": {
          "type": "influxdb",
          "uid": "P5697886F9CA74929"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"Company\",\n    predicate: (r) => r._measurement == \"celestra\",\n    start: 0\n)",
        "hide": 0,
        "includeAll": false,
        "label": "Company 2",
        "multi": false,
        "name": "Company_2",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"Company\",\n    predicate: (r) => r._measurement == \"celestra\",\n    start: 0\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "datasource": {
          "type": "influxdb",
          "uid": "P5697886F9CA74929"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"CelNr\",\n    predicate: (r) => r._measurement == \"celestra\" and r.Company == \"${Company_2}\",\n    start: 0\n)",
        "hide": 0,
        "includeAll": false,
        "label": "CelNr 2",
        "multi": false,
        "name": "CelNr_2",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"CelNr\",\n    predicate: (r) => r._measurement == \"celestra\" and r.Company == \"${Company_2}\",\n    start: 0\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "datasource": {
          "type": "influxdb",
          "uid": "P5697886F9CA74929"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"HzNr\",\n    predicate: (r) => r._measurement == \"celestra\" and r.CelNr == \"${CelNr_2}\" and r.Company == \"${Company_2}\" and r.HgNr == \"${HgNr_2}\",\n    start: 0\n)",
        "hide": 0,
        "includeAll": false,
        "label": "HzNr 2",
        "multi": false,
        "name": "HzNr_2",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"HzNr\",\n    predicate: (r) => r._measurement == \"celestra\" and r.CelNr == \"${CelNr_2}\" and r.Company == \"${Company_2}\" and r.HgNr == \"${HgNr_2}\",\n    start: 0\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "datasource": {
          "type": "influxdb",
          "uid": "P5697886F9CA74929"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"HgNr\",\n    predicate: (r) => r._measurement == \"celestra\" and r.CelNr == \"${CelNr_2}\" and r.Company == \"${Company_2}\", \n    start: 0\n)",
        "hide": 0,
        "includeAll": false,
        "label": "HgNr 2",
        "multi": false,
        "name": "HgNr_2",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n \nschema.tagValues(\n    bucket: \"twinficient\",\n    tag: \"HgNr\",\n    predicate: (r) => r._measurement == \"celestra\" and r.CelNr == \"${CelNr_2}\" and r.Company == \"${Company_2}\", \n    start: 0\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "2022-06-30T22:00:00.000Z",
    "to": "2022-12-31T22:59:59.000Z"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Heater Comparison",
  "uid": "4CG7LbpSn",
  "version": 15,
  "weekStart": ""
}
