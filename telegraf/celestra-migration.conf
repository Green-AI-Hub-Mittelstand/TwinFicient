[agent]
  interval = "10m"
  round_interval = false
  metric_buffer_limit = 2000000000
  flush_interval = "30m"
  flush_jitter = "0s"
  precision = "1s"
  debug = false
  omit_hostname = true

[[outputs.influxdb_v2]]
  urls = ["$INFLUX_DB_ADDRESS"]
  token = "$INFLUX_TOKEN"
  organization = "$INFLUX_ORG"
  bucket = "$INFLUX_BUCKET"
  timeout = "30s"

[[processors.starlark]]
  source = '''
def apply(metric):
  new_metric = deepcopy(metric)
  if "HgIonCurr" in metric.fields:
    new_metric.fields["HgIonCurr"] = float(metric.fields["HgIonCurr"]) / 10.0
  if "HzSoll_ACT" in metric.fields:
    new_metric.fields["HzSoll_ACT"] = float(metric.fields["HzSoll_ACT"]) / 10.0
  if "HzSoll_GLT" in metric.fields:
    new_metric.fields["HzSoll_GLT"] = float(metric.fields["HzSoll_GLT"]) / 10.0
  if "HzIst" in metric.fields:
    new_metric.fields["HzIst"] = float(metric.fields["HzIst"]) / 10.0
  if "OutTemp" in metric.fields:
    new_metric.fields["OutTemp"] = float(metric.fields["OutTemp"]) / 10.0
  if "OutHum" in metric.fields:
    new_metric.fields["OutHum"] = float(metric.fields["OutHum"]) / 10.0
  if "OutIstHum" in metric.fields:
    new_metric.fields["OutIstHum"] = float(metric.fields["OutIstHum"]) / 10.0
  if "HzSoll_ACT" in metric.fields:
    new_metric.fields["HzSoll_ACT"] = float(metric.fields["HzSoll_ACT"]) / 10.0
  return new_metric
'''
[[inputs.sql]]
  driver = "sqlite"
  dsn = "file:./ModbusDatabase.db?cache=shared&mode=ro"
  timeout = "30m"
  [[inputs.sql.query]]
    # We calculate a DuplId and use it as Tag to avoid duplicate removal in influxDB
    # https://docs.influxdata.com/influxdb/v2/write-data/best-practices/duplicate-points
    # alternative would be to increment the nano timestamp by (DuplMarker - 1)
    # should we sort descending to easier quiery for the last element?
    query = "Select * From Celestra where Company = '${COMPANY}'"
    
    measurement = "celestra"
    time_column = "Timestamp"
    time_format = "unix"
    
    field_columns_float = ["HgIonCurr", "HzSoll_ACT","HzSoll_GLT", "HzIst", "OutTemp", "HzSollHum", "OutHum", "HzIstHum", "HgRT"]
    field_columns_int = ["HgStat", "HgSw",  "HgLastErr", "HgSNR", "HgRxLvl", "HgRxPckt", "HgLostPckt", "HgLinkLoss", "HgStarts", "HzStat", "HzHand", "SavNr", "SavRT", "HzModLvl"]
    tag_columns_include = ["Company", "CelNr", "HgNr", "HzNr" ]
    field_columns_exclude =["Time", "Timestamp", "RecordID", "Company","CelNr", "HgNr", "HzNr", "InstanceID"]